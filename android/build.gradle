
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        minSdkVersion = 21
        compileSdkVersion = 33
        targetSdkVersion = 33
        buildToolsVersion = "33.0.2"
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

apply from: "variables.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    
    // Configurazioni di compatibilità Java
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
        }
    }
}

// Fix per Java 17 compatibility
tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

// Renderemo sicura l'operazione di clean principale
tasks.named('clean') { task ->
    onlyIf {
        def toClean = []
        
        project.buildDir.eachFile { file ->
            try {
                toClean << file
            } catch (Exception ignored) {
                // Skip file if we can't even access it
            }
        }
        
        // Try to clean what we can
        toClean.each { file ->
            try {
                if (file.isDirectory()) {
                    file.deleteDir()
                } else {
                    file.delete()
                }
            } catch (Exception e) {
                logger.warn("Non è stato possibile eliminare: ${file.path}")
            }
        }
        
        // Always return false to skip the original task
        // We've already done what we could
        return false
    }
}

// Aggiungiamo una nuova task che bypassa completamente il clean
task buildWithoutClean {
    doLast {
        logger.lifecycle "Esecuzione della build senza pulizia per evitare errori con file bloccati"
    }
}

// Modifichiamo le dipendenze delle task di assembling per saltare il clean quando necessario
gradle.projectsEvaluated {
    tasks.matching { it.name.contains('assembleDebug') || it.name.contains('assembleRelease') }.each { task ->
        // Rimuoviamo la dipendenza da clean
        task.dependsOn.remove('clean')
        // Aggiungiamo la dipendenza dalla nostra task sicura
        task.dependsOn(buildWithoutClean)
    }
}
