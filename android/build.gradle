
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        minSdkVersion = 21
        compileSdkVersion = 33
        targetSdkVersion = 33
        buildToolsVersion = "33.0.2"
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

apply from: "variables.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    
    // Configurazioni di compatibilità Java
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
        }
    }
}

// Fix per Java 17 compatibility
tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

// Aggiungiamo una task superClean a livello di progetto globale che sia più robusta
task superClean {
    doLast {
        println "Esecuzione pulizia profonda del progetto (versione sicura)"
        try {
            // Elimina la directory build principale in modo sicuro
            rootProject.buildDir.deleteDir()
        } catch (Exception e) {
            println "Pulizia root parziale: ${e.message}"
        }
        
        // Pulisci anche le sottodirectory di build nei progetti in modo sicuro
        subprojects.each { subproject ->
            try {
                subproject.buildDir.deleteDir()
                
                def assetsDir = new File("${subproject.projectDir}/build/generated/assets")
                if (assetsDir.exists()) {
                    try {
                        println "Eliminazione directory assets generati in ${subproject.name}"
                        assetsDir.deleteDir()
                    } catch (Exception e) {
                        println "Impossibile pulire completamente assets in ${subproject.name}: ${e.message}"
                    }
                }
                
                if (subproject.name == 'app') {
                    def webAppDir = new File("${subproject.projectDir}/src/main/assets/public")
                    if (webAppDir.exists()) {
                        try {
                            println "Eliminazione directory web app in app/src/main/assets/public"
                            webAppDir.deleteDir()
                        } catch (Exception e) {
                            println "Impossibile pulire directory web app: ${e.message}"
                        }
                    }
                }
            } catch (Exception e) {
                println "Pulizia parziale per ${subproject.name}: ${e.message}"
            }
        }
    }
}

// Fai dipendere superClean dal task clean standard ma renderla più robusta
tasks.register('cleanSafe') {
    doLast {
        try {
            delete rootProject.buildDir
            println "Pulizia rootProject completata"
        } catch (Exception e) {
            println "Pulizia rootProject parziale: ${e.message}"
        }
    }
}

// Sostituisci il task clean standard con una versione più robusta
tasks.named("clean") {
    dependsOn cleanSafe
}
