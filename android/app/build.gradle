
apply plugin: 'com.android.application'

// Add new property to force new compilation on each build
def buildTimestamp = System.currentTimeMillis()

android {
    namespace "com.glutenfreeeats.app"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.glutenfreeeats.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0." + buildTimestamp  // Added timestamp directly to version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Add a BuildConfigField to force recompilation
        buildConfigField "long", "BUILD_TIME", "${buildTimestamp}L"
        buildConfigField "String", "BUILD_ID", "\"build-${buildTimestamp}\""
        resValue "string", "build_time_label", "${new Date(buildTimestamp).format('yyyy-MM-dd HH:mm:ss')}"
        
        // Files and dirs to omit from the packaged assets dir
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        // Enabling coreLibraryDesugaringEnabled for older Android versions
        coreLibraryDesugaringEnabled true
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            // Add a suffisso to make each build unique
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug-${buildTimestamp}"
            resValue "string", "app_version", "1.0-d${buildTimestamp}"
            // Force assets new on each build
            assetDirs = [new File("${project.buildDir}/generated/assets/debug-${buildTimestamp}")]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_version", "1.0.${buildTimestamp}"
        }
    }
    
    lint {
        abortOnError false
        disable 'MissingTranslation'
    }
    
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', '/*.txt', '/*.md']
            pickFirsts += ['META-INF/services/*']
        }
        jniLibs {
            useLegacyPackaging = true
        }
    }
    
    buildFeatures {
        buildConfig true
    }
}

// Aggiungiamo una task per una pulizia più sicura che non fallirà se i file sono bloccati
task safeCleaner {
    doLast {
        println "Esecuzione della pulizia sicura che ignora i file bloccati"
        def buildDir = new File("${project.buildDir}")
        if (buildDir.exists()) {
            try {
                buildDir.eachFile { file ->
                    try {
                        if (file.isDirectory()) {
                            file.deleteDir()
                        } else {
                            file.delete()
                        }
                    } catch (Exception e) {
                        println "Impossibile eliminare ${file.path}, lo salterà: ${e.message}"
                    }
                }
            } catch (Exception e) {
                println "Pulizia parziale completata, alcuni file potrebbero essere stati saltati: ${e.message}"
            }
        }
    }
}

// Sostituire la task clean standard con la nostra versione sicura
tasks.named("clean") {
    dependsOn safeCleaner
    doLast {
        println "Clean completato con sicurezza"
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url "${project.rootDir}/capacitor-cordova-android-plugins/src/main/libs"
    }
    maven {
        url "${project.rootDir}/libs"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidxAppCompatVersion}"
    implementation "androidx.coordinatorlayout:coordinatorlayout:${rootProject.ext.androidxCoordinatorLayoutVersion}"
    implementation "androidx.core:core-splashscreen:${rootProject.ext.coreSplashScreenVersion}"
    implementation "androidx.webkit:webkit:${rootProject.ext.androidxWebkitVersion}"
    implementation project(':capacitor-android')
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.androidxJunitVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.androidxEspressoCoreVersion}"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch (Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
